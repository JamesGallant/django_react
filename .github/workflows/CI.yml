name: continous integration tests
on:
  push:

jobs:
#  linting
  eslint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - run: npm install
        working-directory: ./service_frontend/
      - run: npm run eslint
        working-directory: ./service_frontend/

  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: psf/black@stable
        with:
          options: "--check --verbose"
          src: "./service_backend/src"

#  testing
  service_frontend_testing:
    runs-on: ubuntu-latest
    name: frontend unit tests
    needs: eslint
    strategy:
      matrix:
        node-version: [ 12.x, 14.x ]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
        working-directory: ./service_frontend/
      #      - run: npm run build --if-present
      - run: npm test
        working-directory: ./service_frontend


  service_backend_testing:
    runs-on: ubuntu-latest
    needs: black
    name: backend unit tests
    environment: develop

    services:
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for
        env:
          POSTGRES_PASSWORD: admin
          POSTGRES_USER: admin
          POSTGRES_DB: db
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - '5432:5432'

    steps:
      - name: Checkout code base
        uses: actions/checkout@v2

      - name: Setup Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Setup cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/develop.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r service_backend/requirements/requirements.txt
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Create migrations and run tests
        env:
          DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SQL_PASSWORD: admin
          SQL_USER: admin
          SQL_DATABASE: db
          SERVICE_BACKEND_URL: 'localhost:8001'
          DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'
        run: |
          python service_backend/src/manage.py makemigrations app_accounts
          python service_backend/src/manage.py makemigrations app_applications
          python service_backend/src/manage.py migrate
          python service_backend/src/manage.py test app_accounts.tests
          python service_backend/src/manage.py test app_applications.tests
